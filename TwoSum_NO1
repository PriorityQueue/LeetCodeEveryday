/*Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
UPDATE (2016/2/13):
The return format had been changed to zero-based indices. Please read the above updated description carefully.
*/


public class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer , Integer> map = new HashMap<>();
        Map<Integer , Integer> map2 = new HashMap<>();
        
        for (int i = 0 ;i < nums.length;++i)
        {
            if (map.get(nums[i]) == null)
                map.put(nums[i],i);
            else
                map2.put(nums[i],i);
            
                
        }
        Arrays.sort(nums);
        int[] p = {0,nums.length -1};
        int result ;
        while ((result = nums[p[0]] + nums[p[1]]) != target)
        {
            if (result > target)
                --p[1];
            else
                ++p[0];
        }
        if (nums[p[0]]!=nums[p[1]]) {
            p[0] = map.get(nums[p[0]]);
            p[1] = map.get(nums[p[1]]);
        } else {
            p[0] = map.get(nums[p[0]]);
            p[1] = map2.get(nums[p[1]]);
        }
        return  p;
    
    
    }
}
